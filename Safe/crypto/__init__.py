def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def crt2(a1, n1, a2, n2):
    d = gcd(n1, n2)
    if (a2 - a1) % d != 0:
        return None, None
    m = (a2 - a1) // d
    n1_d, n2_d = n1 // d, n2 // d
    inv = pow(n1_d, -1, n2_d)
    k = (m * inv) % n2_d
    x = a1 + k * n1
    mod = (n1 // d) * n2
    return x, mod

def integer_cube_root(n):
    low, high = 0, n
    while low <= high:
        mid = (low + high) // 2
        mid_cubed = mid ** 3
        if mid_cubed < n:
            low = mid + 1
        elif mid_cubed > n:
            high = mid - 1
        else:
            return mid
    return high

# 输入的模数和密文
n1 = 25492276960582962886074699484837064744866118188154406260863002306705381074238110128542329507362492150387021080596943676797269037808573646610172899651434488235263690634613661655687376997964563078659398781877841502142587282472966796621743939168310613252658035618681666110461980535164184124092589089389830257814390082152834974350659495737440153615028844671276849901978646654086974325642262199576386600807913855811401675440338282734202249400262702367458547334355946032313689610990245235203799096080276177708132550017132800622138843739446001669656041835815607690837200737557957300823085138719575663374555582830047940167993
c1 = 19299650499548367929167100176191925323384996948952761756569437628795615197363503607211118102722234081580967557745239425097582863829063011314079227117044908242997695380649262511396193600369744540478472841266151641879635103306231951233704296746394543782124671369176687064078441546541525909655168539654970587832650133910641854219806509757747673194642543483363552739014379388864100731904202546114479237126998189019129154199078832473413027161223742640781830327740468059653921269387712426192933097207960273644052991325062487879859761985656712216679767018860097393377089143447696574037987461904447655602606345929606477995404

n2 = 15562867604558269927760288556800612609818376063639186032580574864634706689832085322913818343057952569738873814667738064806702285376794829000813761284131228601293420588333650948291803928222390892070389293327655663841146406750793081053343404367130016038882651346489016203965452698161963857919829338770899357686271637671541012689691206665519741084487645687426063269969541715506188327707556104967572304444464895309751039324154166525630759185949377686365823135886175451172523889591154092790660341143550992774910185293514661097975386131684872568290173619360600894605159371882360062592100479357410632314059045338689023340809
c2 = 5121235589298066009895747067412187447893420354727049612972655637499439591257014095540115949020985299395090692328208298807027004768816449742450396119256506947165464210855574411432857545757797741647380965156761852160920215411079050733778051349405149306494359802391592365489602265180022427440559981740501134075489043598329455376723618958156412354704359373768120886273066177152867558545087847227351512245139201354669466267157263246179741077297861909443852118000989105270640298027268315327523289462312345045972954338226477435307941911096762161451994166916091295668394638543127455637599503448381134488841212583780917374638

n3 = 19395981518487167115741171863173516489499753415238944173431331483257658874614731460626346184917617853475784811219658885743086684047383533645489389544343357682466580986925168196246560785196099528061687669379093270276861284280669543073413277219510631406982035099413555839180517251119532755009471407083826740498170633487427620395029087148257386855451006848274318363155717418345040740613333836526123561081136165043751019137461630669461989208267417279854403311554791087357858572419642589327175377135693089175253721184341314604903982231781602927341905285097529806081413622705332040381143728540340268205143327903684722821651
c3 = 15686488456329589176850630329630669312112023737967087317584432050384679870991929636001657064877444258989428247165408528914150131529637608183154240567323416783176302283923079717568493052949167724473914865415068350942345727034563095994975837012354012933963479387982339877816514564318914816665033254744268942301638285263930087721323361694502145652251317429711926331985615507130227721332342409540514487404749665303881581721662730552648399265195059293901416416328646928979862071256097887299644082165470946691213138364269807688699808477312931058707458453723681014281395116470025978548715001115798655218912642853616478611680

# 检查模数是否互质
assert gcd(n1, n2) == 1 and gcd(n1, n3) == 1 and gcd(n2, n3) == 1, "模数不互质"

# 合并前两个同余式
x12, mod12 = crt2(c1, n1, c2, n2)
assert x12 is not None, "无法合并前两个同余式"

# 合并第三个同余式
x, mod_final = crt2(x12, mod12, c3, n3)
assert x is not None, "无法合并第三个同余式"

# 计算立方根
cube_root = integer_cube_root(x)
assert cube_root ** 3 == x, "立方根不正确"

# 转换为字符串
uid_bytes = cube_root.to_bytes((cube_root.bit_length() + 7) // 8, 'big')
try:
    uid = uid_bytes.decode()
except UnicodeDecodeError:
    uid = str(cube_root)

print("解码后的UID:", uid)